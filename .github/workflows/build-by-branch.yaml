name: build-by-branch

on:
  push:
    branches:
      - main
      - f/*
      - fix/*
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**.md"
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Caching dependencies
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Restore Dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release --no-restore
      - name: Application Test
        run:  dotnet test ./tests/NKZSoft.Template.Application.Tests --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      - name: REST Test
        run:  dotnet test ./tests/NKZSoft.Template.Presentation.Rest.Tests --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      - name: GraphQL Test
        run:  dotnet test ./tests/NKZSoft.Template.Presentation.GraphQL.Tests --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      - name: SignalR Test
        run:  dotnet test ./tests/NKZSoft.Template.Presentation.SignalR.Tests --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      - name: GRPC Test
        run:  dotnet test ./tests/NKZSoft.Template.Presentation.Grpc.Tests --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      - name: Merge test results
        run: |
            dotnet tool install -g dotnet-reportgenerator-globaltool
            reportgenerator "-reports:coverage/**/coverage.cobertura.xml" "-targetdir:coverage/result" -reporttypes:Cobertura
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/result/*.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '30 40'
#      - name: Add Coverage PR Comment
#        uses: marocchino/sticky-pull-request-comment@v2
#        if: github.event_name == 'pull_request'
#        with:
#          recreate: true
#          path: code-coverage-results.md
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Create badge
#        uses: schneegans/dynamic-badges-action@v1.6.0
#        with:
#          auth: ${{ secrets.GIST_SECRET }}
#          gistID: 7fa58d77450b2a406ba5cf1b3fd258a8
#          filename: microservice-template.json
#          label: coverage
#          message: 50

